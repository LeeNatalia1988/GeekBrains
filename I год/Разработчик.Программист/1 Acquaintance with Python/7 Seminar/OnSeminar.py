# Задача No47. Решение в группах
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине программы используется 
# множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, 
# а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.

# Ввод:
# values = [1, 23, 42, ‘asdfg’]
# transformed_values = list(map(trasformation, values)) if values == transformed_values:
# print(‘ok’) else:
# print(‘fail’)
# Вывод:
# ok


# values = [1, 23, 42, 'asdfg']
# transormed_values = list(map(lambda transformation: transformation, values))
# if values == transormed_values:
#     print('ok')
# else:
#     print('fail')

# Задача No49. Решение в группах

# Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, 
# по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, что у 
# вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. 
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется 
# по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а 
# затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна

# Задача No49. Решение в группах
# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(max(filter(lambda a: a[0] != a[1], orbits), key=lambda a: 3.14 * a[0] * a[1]))

# второй вариант:
# def find_farthest_orbit(value):
#     not_round_orbits = list(filter(lambda item: item[0] != item[1], value))
#     area = list(map(lambda item: item[0] * item[1], not_round_orbits))
#     return not_round_orbits[area.index(max(area))]

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

# третий вариант:
# max_area_orbit = max(list_of_orbits, key=lambda x: (x[0] != x[1])* x[0] * x[1])


# 2. Дан список, вывести отдельно буквы и цифры.

# TODO:
# a = ("a", 'b', '2', '3', 'c')
# b = ('a', 'b', 'c')
# c = ('1', '2', '3')
# list = list(a+b+c)
# print(list)
# list_1 = list(filter(lambda x: 'a' or 'b' or 'c'))
# list_2 = list(filter(lambda y: y == int))
# print(list_1+list_2)




# Напишите программу, которая подсчитает и выведет сумму квадратов всех двузначных чисел, делящихся на 9.
# При решении задачи используйте комбинацию функций filter, map, sum.

# Обратите внимание: на 9 должно делиться исходное двузначное число, а не его квадрат.

# list_1 = list(range(10, 101))
# list_1 = list(filter(lambda x: x % 9 == 0, list_1))
# print(list_1)
# sum = 0
# for i in list_1:
#     sum = sum + i*i
# print(sum)



# примеры лямбда:
# def y1(x):
#     return x+1

# y = lambda x: x+1
# print((lambda x: x+1) (5))
# print(y(5))
# print(y1(5))


# 1.Вводится список целых чисел в одну строчку через пробел. Необходимо оставить в нем только двузначные числа. 
# Реализовать программу с использованием функции filter. Результат отобразить на экране в виде последовательности 
# оставшихся чисел в одну строчку через пробел.


#  пример  - 8 11 0 -23 140 1 => 11 -23

# list_1 = [8, 11, 0, -23, 140, 1]
# list_2 = list(filter(lambda x: 9 < abs(x) < 100, list_1))
# print(list_2)

# list_1 = '8, 11, 0, -23, 140, 1'.split(', ')
# list_2 = list(filter(lambda x: len(str(abs(int(x)))) == 2, list_1))
# print(list_2)

